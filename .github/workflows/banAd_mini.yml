(async () => {
  const fs = require('fs-extra');
  const path = require('path');
  const YAML = require('yaml');

  try {
    // 把你原来的 main() 内容直接放这里（不用再定义 async function main）
    const miniPath = 'temp_repo/banAd_mini.json';
    const adobePath = 'temp_repo/a-dove-is-dumb.yaml';
    const outputPath = 'rules/banAd_mini.json';

    let miniData = {};
    if (await fs.pathExists(miniPath)) {
      miniData = JSON.parse(await fs.readFile(miniPath, 'utf8')) || {};
    }

    const combined = { domain: [], domain_suffix: [], domain_regex: [] };

    if (Array.isArray(miniData.rules)) {
      for (const rule of miniData.rules) {
        if (Array.isArray(rule.domain)) combined.domain.push(...rule.domain);
        if (Array.isArray(rule.domain_suffix)) combined.domain_suffix.push(...rule.domain_suffix);
        if (Array.isArray(rule.domain_regex)) combined.domain_regex.push(...rule.domain_regex);
      }
    }

    const yamlContent = await fs.readFile(adobePath, 'utf8');
    const yamlData = YAML.parse(yamlContent) || {};
    const payload = Array.isArray(yamlData.payload) ? yamlData.payload : [];

    for (const item of payload) {
      if (typeof item !== 'string' || !item.trim()) continue;
      const domain = item.trim();
      if (domain.startsWith('*.')) {
        combined.domain_suffix.push(domain.slice(2));
      } else {
        combined.domain.push(domain);
      }
    }

    for (const key of ['domain', 'domain_suffix', 'domain_regex']) {
      combined[key] = Array.from(new Set(
        combined[key].map(d => typeof d === 'string' ? d.trim() : d)
      ));
      if (key === 'domain_suffix') {
        combined[key] = combined[key].map(d => d.startsWith('.') ? d.slice(1) : d);
      }
      combined[key] = combined[key].sort();
      if (!combined[key].length) delete combined[key];
    }

    const output = { version: 2, rules: [combined] };

    await fs.ensureDir(path.dirname(outputPath));
    await fs.writeJson(outputPath, output, { spaces: 2 });
    console.log(`Merged banAd_mini.json + a-dove-is-dumb.yaml -> ${outputPath}`);
  } catch (err) {
    console.error(err);
    process.exit(1);
  }
})();
